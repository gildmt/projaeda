<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_utils_8cpp" kind="file" language="C++">
    <compoundname>Utils.cpp</compoundname>
    <includes refid="_utils_8h" local="yes">Utils.h</includes>
    <incdepgraph>
      <node id="308">
        <label>iomanip</label>
      </node>
      <node id="301">
        <label>windows.h</label>
      </node>
      <node id="306">
        <label>Data.h</label>
        <link refid="_data_8h"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>Utils.cpp</label>
        <link refid="_utils_8cpp"/>
        <childnode refid="300" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>string</label>
      </node>
      <node id="303">
        <label>fstream</label>
      </node>
      <node id="305">
        <label>vector</label>
      </node>
      <node id="300">
        <label>Utils.h</label>
        <link refid="_utils_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>sstream</label>
      </node>
      <node id="302">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_utils_8cpp_1a9d7e8af417b6d543da691e9c0e2f6f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearScreen</definition>
        <argsstring>()</argsstring>
        <name>clearScreen</name>
        <briefdescription>
<para>Clears the screen. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="10" column="1" bodyfile="Utils.cpp" bodystart="10" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a3412c3984b6336261d13e3c0548a5c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linha</definition>
        <argsstring>(int n)</argsstring>
        <name>linha</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Linhas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The int to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="30" column="1" bodyfile="Utils.cpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a4d88f6a79395755e9a71b7d1978783d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long le_num</definition>
        <argsstring>()</argsstring>
        <name>le_num</name>
        <briefdescription>
<para>Le number. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A long. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="40" column="1" bodyfile="Utils.cpp" bodystart="40" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a8e09ff677949c111802ae377fdd91617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float le_float</definition>
        <argsstring>()</argsstring>
        <name>le_float</name>
        <briefdescription>
<para>Le float. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A float. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="58" column="1" bodyfile="Utils.cpp" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1ab37c9db2e4e3eabb790109bf743d8e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int leInteiro</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>leInteiro</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Le inteiro. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="76" column="1" bodyfile="Utils.cpp" bodystart="76" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a7a3eb435e1320dfde1d3b6cb622cb922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long leNif</definition>
        <argsstring>()</argsstring>
        <name>leNif</name>
        <briefdescription>
<para>Le nif. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A long. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="89" column="1" bodyfile="Utils.cpp" bodystart="89" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1ae99df0555f89687a90cafcf93944a5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string leTitulo</definition>
        <argsstring>()</argsstring>
        <name>leTitulo</name>
        <briefdescription>
<para>Le titulo. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="109" column="1" bodyfile="Utils.cpp" bodystart="109" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1ae6a78d75ee2f55c07e88328951c35a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void espera_input</definition>
        <argsstring>()</argsstring>
        <name>espera_input</name>
        <briefdescription>
<para>Espera input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="125" column="1" bodyfile="Utils.cpp" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a2df60dc042161d582a43a28edf252e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data" kindref="compound">Data</ref></type>
        <definition>Data getData</definition>
        <argsstring>()</argsstring>
        <name>getData</name>
        <briefdescription>
<para>Gets the data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="133" column="1" bodyfile="Utils.cpp" bodystart="133" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a7aaba7cf2f82963fb3be7a4d32194264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fich_vazio</definition>
        <argsstring>(fstream &amp;pFile)</argsstring>
        <name>fich_vazio</name>
        <param>
          <type>fstream &amp;</type>
          <declname>pFile</declname>
        </param>
        <briefdescription>
<para>Fich vazio. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it succeeds, false if it fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="143" column="1" bodyfile="Utils.cpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="_utils_8cpp_1a4b91d1275d652ef7f6bc53d5389f95cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acabalog</definition>
        <argsstring>(string &amp;str)</argsstring>
        <name>acabalog</name>
        <param>
          <type>string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Acabalogs the given string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils.cpp" line="148" column="1" bodyfile="Utils.cpp" bodystart="148" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Ordens.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>Created<sp/>on:<sp/>17/10/2016</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Gil<sp/>Teixeira<sp/>&amp;<sp/>Paulo<sp/>Correia</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_utils_8h" kindref="compound">Utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a9d7e8af417b6d543da691e9c0e2f6f9f" kindref="member">clearScreen</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>COORD<sp/>upperLeftCorner<sp/>=<sp/>{<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>charsWritten;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>conSize;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>hCon<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/><sp/>csbi;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>GetConsoleScreenBufferInfo(hCon,<sp/>&amp;csbi);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>conSize<sp/>=<sp/>csbi.dwSize.X<sp/>*<sp/>csbi.dwSize.Y;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>with<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>FillConsoleOutputCharacter(hCon,<sp/>TEXT(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>conSize,<sp/>upperLeftCorner,<sp/>&amp;charsWritten);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>GetConsoleScreenBufferInfo(hCon,<sp/>&amp;csbi);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>FillConsoleOutputAttribute(hCon,<sp/>csbi.wAttributes,<sp/>conSize,<sp/>upperLeftCorner,<sp/>&amp;charsWritten);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cursor<sp/>to<sp/>upper<sp/>left<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>SetConsoleCursorPosition(hCon,<sp/>upperLeftCorner);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a3412c3984b6336261d13e3c0548a5c26" kindref="member">linha</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/><ref refid="_utils_8h_1ad58a1fbfc85c7e4790fc55e654f50221" kindref="member">TAB</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a4d88f6a79395755e9a71b7d1978783d8" kindref="member">le_num</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(input);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(ss<sp/>&gt;&gt;<sp/>num<sp/><sp/>&amp;&amp;<sp/>ss.eof()))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>invalido&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Introduza<sp/>um<sp/>numero<sp/>valido:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>ss.clear();<sp/></highlight><highlight class="comment">//apagar<sp/>conteudo<sp/>da<sp/>stringsstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>input;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a8e09ff677949c111802ae377fdd91617" kindref="member">le_float</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(input);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(ss<sp/>&gt;&gt;<sp/>num<sp/><sp/>&amp;&amp;<sp/>ss.eof()))<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>invalido&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Introduza<sp/>um<sp/>numero<sp/>valido:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>ss.clear();<sp/></highlight><highlight class="comment">//apagar<sp/>conteudo<sp/>da<sp/>stringsstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>input;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1ab37c9db2e4e3eabb790109bf743d8e13" kindref="member">leInteiro</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/><ref refid="_utils_8cpp_1a4d88f6a79395755e9a71b7d1978783d8" kindref="member">le_num</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num<sp/>&lt;<sp/>min<sp/>||<sp/>num<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>Invalido.<sp/>Introduza<sp/>um<sp/>numero<sp/>entre<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>e<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/><ref refid="_utils_8cpp_1a4d88f6a79395755e9a71b7d1978783d8" kindref="member">le_num</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a7a3eb435e1320dfde1d3b6cb622cb922" kindref="member">leNif</ref>()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(input);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ss<sp/>&gt;&gt;<sp/>num<sp/><sp/>&amp;&amp;<sp/>ss.eof()))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>invalido&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>num<sp/>&lt;=<sp/>999999999)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>esta<sp/>funcao<sp/>apenas<sp/>aceira<sp/>titulo<sp/>com<sp/>apenas<sp/>uma<sp/>palavra!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1ae99df0555f89687a90cafcf93944a5c7" kindref="member">leTitulo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>titulo;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(cin,<sp/>input);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(input);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ss<sp/>&gt;&gt;<sp/>titulo<sp/><sp/>&amp;&amp;<sp/>ss.eof()))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>invalido&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>titulo;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1ae6a78d75ee2f55c07e88328951c35a65" kindref="member">espera_input</ref>()</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>TAB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Pressione<sp/>Enter<sp/>para<sp/>continuar...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore(numeric_limits&lt;streamsize&gt;::max(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="class_data" kindref="compound">Data</ref><sp/><ref refid="_utils_8cpp_1a2df60dc042161d582a43a28edf252e75" kindref="member">getData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>t<sp/>=<sp/>time(0);<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>now;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data" kindref="compound">Data</ref><sp/>actual;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>localtime_s(&amp;now,<sp/>&amp;t);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>actual<sp/>=<sp/><ref refid="class_data" kindref="compound">Data</ref>(now.tm_mday,<sp/>(now.tm_mon<sp/>+<sp/>1),<sp/>(now.tm_year<sp/>+<sp/>1900));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actual;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a7aaba7cf2f82963fb3be7a4d32194264" kindref="member">fich_vazio</ref>(fstream&amp;<sp/>pFile)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pFile.peek()<sp/>==<sp/>fstream::traits_type::eof();</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_utils_8cpp_1a4b91d1275d652ef7f6bc53d5389f95cd" kindref="member">acabalog</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sufixo<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.size()<sp/>&lt;<sp/>sufixo.size())</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str<sp/>+<sp/>sufixo;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.compare(str.size()<sp/>-<sp/>sufixo.size(),<sp/>sufixo.size(),<sp/>sufixo)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str<sp/>+<sp/>sufixo;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Utils.cpp"/>
  </compounddef>
</doxygen>
